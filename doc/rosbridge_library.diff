diff --git a/rosbridge_library/package.xml b/rosbridge_library/package.xml
index 87a4b93..2bb8002 100644
--- a/rosbridge_library/package.xml
+++ b/rosbridge_library/package.xml
@@ -1,5 +1,6 @@
 <?xml version="1.0"?>
-<package format="2">
+<?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?>
+<package format="3">
   <name>rosbridge_library</name>
   <version>1.0.2</version>
   <description>
diff --git a/rosbridge_library/src/rosbridge_library/internal/message_conversion.py b/rosbridge_library/src/rosbridge_library/internal/message_conversion.py
index b9a4ac9..0fb11b3 100644
--- a/rosbridge_library/src/rosbridge_library/internal/message_conversion.py
+++ b/rosbridge_library/src/rosbridge_library/internal/message_conversion.py
@@ -47,10 +47,10 @@ from rosbridge_library.util import string_types, bson
 import sys
 if sys.version_info >= (3, 0):
     type_map = {
-    "bool":    ["bool"],
+    "bool":    ["bool", "boolean"],
     "int":     ["int8", "byte", "uint8", "char",
                 "int16", "uint16", "int32", "uint32",
-                "int64", "uint64", "float32", "float64"],
+                "int64", "uint64", "float32", "float64", "double"],
     "float":   ["float32", "float64", "double"],
     "str":     ["string"]
     }
@@ -72,8 +72,8 @@ else:
 
 list_types = [list, tuple]
 ros_time_types = ["builtin_interfaces/Time", "builtin_interfaces/Duration"]
-ros_primitive_types = ["bool", "byte", "char", "int8", "uint8", "int16",
-                       "uint16", "int32", "uint32", "int64", "uint64",
+ros_primitive_types = ["bool", "boolean", "byte", "char", "int8", "uint8",
+                       "int16", "uint16", "int32", "uint32", "int64", "uint64",
                        "float32", "float64", "double", "string"]
 ros_header_types = ["Header", "std_msgs/Header", "roslib/Header"]
 ros_binary_types = ["uint8[]", "char[]"]
@@ -285,7 +285,10 @@ def _to_primitive_inst(msg, rostype, roottype, stack):
     # Typecheck the msg
     msgtype = type(msg)
     if msgtype in primitive_types and rostype in type_map[msgtype.__name__]:
-        return msg
+        if rostype in type_map['float'] and msgtype.__name__ == 'int':
+            return float(msg)
+        else:
+            return msg
     elif msgtype in string_types and rostype in type_map[msgtype.__name__]:
         return msg.encode("utf-8", "ignore") if python2 else msg
     raise FieldTypeMismatchException(roottype, stack, rostype, msgtype)
